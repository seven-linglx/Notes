#+TITLE: Data Structure And Algorithm
#+AUTHOR: lingluxiang
#+DATE:<2021-07-18 周日>

* Data structure and Algorithm
** Graph data structure (<2018-08-28 二>)
*** 图其实就是一个链表，其节点和边的数据结构定义如下
    #+BEGIN_SRC C++
    typedef struct _LINE
    {
      int end;
      int weight;
      struct _LINE* next;
    }LINE;

    typedef struct _VECTEX
    {
      int start;
      int number;
      LINE* neighbor;
      struct _VECTEX* next;
    }VECTEX;

    typedef struct _GRAPH
    {
      int count;
      VECTEX* head;
    }GRAPH;
    #+END_SRC

** 最短路径算法
*** Floyd-Warshall
    #+BEGIN_SRC C++
    for(k=1;k<=n;k++)
       for(i=1;i<=n;i++)
          for(j=1;j<=n;j++)
            if(e[i][k]<inf && e[k][j]<inf && e[i][j]>e[i][k]+e[k][j])
                e[i][j]=e[i][k]+e[k][j];
    #+END_SRC

*** Dijkstra
    #+BEGIN_SRC C++ -N
    for(i=1;i<=n-1;i++)
    {
      // 找到离1号顶点最近的顶点
      min = inf;
      for (j = 1; j <= n; j++)
      {
        if (book[j] == 0 && dis[j] < min)
        {
          min = dis[j];
          u = j;
        }
      }
      book[u] = 1;
      for (v = 1; v <= n; v++)
      {
        if (e[u][v] < inf)
        {
          if (dis[v] > dis[u] + e[u][v])
            dis[v] = dis[u] + e[u][v];
        }
      }
    }
    #+END_SRC

** 用数组实现邻接表
分别使用 u,v,w,first,next 五个数组保存图的信息,u、v 和 w 三个数组用来记录每条边的具体信息，
即 u[i]、v[i]和 w[i]表示 第 i 条边是从第 u[i]号顶点到 v[i]号顶点（u[i]->v[i]），且权值为 w[i]
first[j]的值代表第 j 号顶点所在的其中一条边的编号，next[k]表示第 k 条边连接着第 next[k]条边，且它
们属于同一个顶点，即在 next 数组中可以递归找到同一个顶点的所有边.
** 快速排序算法
核心代码
#+BEGIN_SRC C++
void QuickSort(std::vector<T>& data, int s, int e)
{
  if (s >= e)
    return;

  T center = data[s];
  int i = s;
  int j = e;
  while (1)
  {
    while (data[j] >= center && i < j)
    {
      j--;
    }
    while (data[i] <= center && i < j)
    {
      i++;
    }
    if (i < j)
    {
      T temp = data[j];
      data[j] = data[i];
      data[i] = temp;
    }
    else
    {
      data[s] = data[i];
      data[i] = center;
      break;
    }
  }
  QuickSort<int>(data, s, i - 1);
  QuickSort<int>(data, j + 1, e);
}
#+END_SRC

** 子符串匹配算法 (<2018-08-31 五>)
*** KMP
*** BM
*** Sunday
核心代码
#+BEGIN_SRC C++
int sunday(const string& tar, const string& src)
{
  int idx = 0;
  size_t len_src = src.length();
  while (idx + len_src <= tar.length())
  {
    for (size_t i = 0; i < len_src; ++i)
    {
      if (src[i] != tar[idx + i])
        break;
      if (i == len_src - 1)
        return idx;
    }
    for (size_t i = 0; i < len_src; ++i)
    {
      if (src[i] == tar[idx + len_src])
      {
        idx += len_src - i;
        break;
      }
      if (i == len_src - 1)
      {
        idx += len_src + 1;
      }
    }
  }
  return -1;
}
#+END_SRC
