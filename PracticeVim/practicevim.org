#+TITLE: PracticeVim的读书笔记
* 目录 :TOC_2_gh:noexport:
- [[#第一章-vim解决问题的方式][第一章 Vim解决问题的方式]]
- [[#第二章-普通模式][第二章 普通模式]]
- [[#第三章-插入模式][第三章 插入模式]]
- [[#第四章-可视模式][第四章 可视模式]]
- [[#第五章-命令行模式][第五章 命令行模式]]
- [[#第六章-管理多个文件][第六章 管理多个文件]]
- [[#第八章-用动作命令在文档中移动][第八章 用动作命令在文档中移动]]
- [[#第九章-在文件间跳转][第九章 在文件间跳转]]
- [[#第十章-复制与粘贴][第十章 复制与粘贴]]

* 第一章 Vim解决问题的方式
- >G 增加从当前行到文档最末尾的缩进层级
- s是替换，c是修改
- 复合命令
| 复合命令 | 等效的命令 |
| C        | c$         |
| s        | cl         |
| S        | ^C         |
| I        |            |
| A        |            |
| o        |            |
| O        |            |
 
- /是往下搜索，?是往上搜索  
* 第二章 普通模式
- {d,y,c,v}aw可以在单词中间位置{删除，复制，修改}整个单词
- <C-a>,<C-x>分别对数字进行加减，前面加数字时，可以对被操作数加减这个数
- Vim 把以 0 开头的数字解释为八进制值，而不是十进制。添加 'set nrformats='让其为十进制
- dl 删除一个字符,dap 删除一个段落
- g~反转大小写，gu变小写，gU变大写，可以在后面添加aw操作
- 文本对象
| 按键 | 功能               |
| aw   | 一个单词及一个空格 |
| aW   | 当前字串及一个空格 |
| as   | 一个句子及一个空格 |
| ap   | 当前段落及一个空行 |
| ab   | 一块               |
| iw   | 当前单词           |
| iW   | ...                |
| is   | ...                |
| ip   | ...                |

* 第三章 插入模式
- 插入模式下组合键
| 按键  | 功能         |
| <C-h> | 删除一个字符 |
| <C-u> | 删至行首     |
| <C-w> | 删除一个单词 |

- <C-o> 插入-普通模式，在插入模式时，按此键，可以执行一次普通模式命令
- y{t,f}, 复制当前光标下的字符到逗号位置的字符，t不包括逗号，f包括逗号
- <C-r>｛register} 插入模式下，粘贴register中的内容到当前位置
- <C-r>= 访问表达式的值，粘贴到当前位置，比如 <C-r>=6*35<CR>将6*35 的值210粘贴在当前
- R 进入替换模式，可以连续替换字符
* 第四章 可视模式
- 可视模式
| 按键  | 功能                 |
| v     | 面向字符             |
| V     | 面向行               |
| <C-v> | 列模式               |
| gv    | 重选上次的高亮选区   |
| o     | 切换高亮选区的活动端 |
| U     | 切换大小写           |

- <C-v> 选中多行，可以对于长度不一样的多行，使用列模式并在行尾插入内容，可同样插入到几行
* 第五章 命令行模式
- :3d<CR> 删除第三行的内容
- {start},{end} 表示位置范围的一般表达形式
| 符号 | 地址                         |
| 1    | 文件的第一行                 |
| $    | 文件的最后一行               |
| 0    | 虚拟行，位于文件第一行的上面 |
| .    | 光标所在行                   |
| 'm   | 包含标记所在的行             |
| '<   | 高亮选区的开始行             |
| '>   | 高亮选区的结束行             |
| %    | 整个文件，:1,$的简写         |

- :[range]copy {address} --> :6copy. 作用为：为第6 行创建一份副本，并放到当前行下方
- :copy = :co = :t
- :'<,'>move$ 移动高亮选区到文件末尾, move=m
- @: 重复上次的Ex命令
- :'<,'>normal A;<CR> 对选区的内容执行普通模式的命令A;
- <C-d> 命令行模式中显示可用的补全列表
- 按键映射
| 设置                  |
| cnoremap <C-p> <Up>   |
| cnoremap <C-n> <Down> |
- 命令行窗口
| 命令   | 功能                         |
| q/     | 打开查找命令历史的命令行窗口 |
| q:     | 打开Ex 命令历史的命令行窗口  |
| :<C-f> | 从命令行模式切换到命令行窗口 |
- ! 命令行中，用于执行外部命令，%代表当前文件，:!source %表示source了当前文件
- :read !tree 读取外部tree命令的输出重定向到缓冲区
- 把缓冲区内容作为指定 {cmd} 的标准输入
| 命令        | 作用                                             |
| :write ! sh | 把缓冲区的内容传给外部的 sh 命令作为标准输入     |
| :write !sh  | 同上                                             |
| :write! sh  | 把缓冲区内容写到一个名为 sh 的文件，叹号强制执行 |
- :2,$!sort -t',' -k2 对第二行到最后一行的内容使用sort排序，排序使用逗号分割并以第二个字段进行排序
- !G 会打开命令行并把范围 :.,$! 预置在命令行上
* 第六章 管理多个文件
  - 文件名匹配
    | 命令    | 作用                       |
    | *.*     | 当前目录下的所有文件       |
    | **/*.js | 当前目录及子目录下的js文件 |
    | **/*.*  | 类推                       |
  - 打开文件
    | 命令               | 作用                        |
    | vim *.txt          | 打开多个文件                |
    | :args *.txt        | 在进入vim后，再打开多个文件 |
    | :args *.txt *.org  | 打开多个glob模式的文件      |
    | :args `cat .files` | 把cat的输出做为args的参数   |
    | :ls                | 查看打开的缓冲区            |
    | :args              |                             |
    | :bnext             | 切换到下一个缓冲区          |
    | :bprev             | 切换到上一个缓冲区          |
  - 窗口操作
    | 命令        | 作用                           |
    | <C-w>s      | 水平切分                       |
    | <C-w>v      | 垂直切分                       |
    | :sp {file}  | 水平切分，并在新窗口中打开文件 |
    | :vsp {file} |                                |
  - 窗口切换
    | 命令          | 作用                         |
    | <C-w>w        | 在窗口中循环切换             |
    | <C-w>h        |                              |
    | <C-w>j        |                              |
    | <C-w>k        |                              |
    | <C-w>l        |                              |
    | <C-w>c & :clo | 关闭活动窗口                 |
    | <C-w>o & :on  | 只保留活动窗口，关闭其他窗口 |
    | <C-w>=        | 使所有窗口等宽，等高         |
    | <C-w>_        | 最大化活动窗口的高度         |
    | <C-w>竖线     | 最大化活动窗口的宽度         |
    | [N]<C-w>_     | 把活动窗口的高度设为[N]行    |
    | [N]<C-w>竖线  |                              |
  - 标签页
    | 命令              | 作用                                                                      |
    |-------------------+---------------------------------------------------------------------------|
    | <C-w>T            | 把当前窗口移动一个新的标签页                                              |
    | :tabc             |                                                                           |
    | :tabo             |                                                                           |
    | :tabe {filename}  | 如果不带文件名，创建一个空的标签页                                        |
    | :tabn {N} & {N}gt | 切换到编号为N的标签页                                                     |
    | :tabn & gt        |                                                                           |
    | :tabp & gT        |                                                                           |
    | :tabmove [N]      | 当[N]为0时，当前标签页会被移到开头；如果省略了[N]，当前标签页会被移到结尾 |
    
* 第八章 用动作命令在文档中移动
  - 屏幕行和实际行，开启wrap后，实际是一行的会在屏幕上显示成多行
    | 命令           | 作用           |
    |----------------+----------------|
    | j,k,0,^,$      | 对实际行起作用 |
    | gj,gk,g0,g^,g$ | 对屏幕行起作用 |
  - 基于单词移动
    | 命今 | 作用                                    |
    |------+-----------------------------------------|
    | w,b  | 正&反移动到下个单词的开头，以词首为目标 |
    | e,ge | 正&反移动到下个单词的结尾，以词尾为目标 |
    | W,B  | 对字串进行移动                          |
    | E,gE | 对字串进行移动                          |
  - 单词和字串we,',re是单词，we're是字串
  - 标记跳转
    | 命今 | 作用                                                        |
    |------+-------------------------------------------------------------|
    | ma   | 对当前位置打上标记a，小写字母是局部标记，大写字母是全局标记 |
    | 'a   | 在其它位置时，可快速跳回此行的第一个非空字符                |
    | `a   | 在其它位置时，快速跳回此行此列                              |
    | ''   | 当前文件中上次跳转动作之前的位置                            |
    | '.   | 上次修改的地方                                              |
    | '^   | 上次插入的地方                                              |
    | ']   | 上次修改或复制的结束位置                                    |
    | '[   | 上次修改或复制的起始位置                                    |
    | '<   | 上次高亮选区的起始位置                                      |
    | '>   | 上次高亮选区的结束位置                                      |
    | ``   | 命令有同样功能，只是比''多了定位列的功能                    |
  - surround.vim
    | 命今 | 作用                  |
    |------+-----------------------|
    | cs"' | 把字符串两边的"变成'  |
    | S"   | 在选中内容的两边加上" |
* 第九章 在文件间跳转 
  - 跳转
    | 命令   | 作用                         |
    |--------+------------------------------|
    | :jumps | 查看跳转列表的内容           |
    | <C-o>  | 后退                         |
    | <C-i>  | 前进                         |
    | (/)    | 跳转到上一句/下一句的开头    |
    | {/}    | 跳转到上一段/下一段的开头    |
    | H/M/L  | 跳到屏幕最上方/正中间/最下方 |
    | gf     | 跳转到光标下的文件名         |
    | <C-]>  | 跳转到光标下关键字的定义之处 |
  - 遍历改变列表
    | 命令     | 作用                                       |
    |----------+--------------------------------------------|
    | :changes | 显示改变列表                               |
    | g;       | 跳到文档上次更改过的地方，反向遍历改变列表 |
    | g,       | 跳到文档下次更改过的地方，正向遍历改变列表 |
    | gi       | 回到退出的地方继续编辑                     |
  - 指定文件扩展名和路径
    | 命令                          | 作用                                 |
    |-------------------------------+--------------------------------------|
    | :set suffixesadd+=.rb         | 使用gf命令时，对文件自动添加后缀类型 |
    | :set path?                    | 查看现有的path变量                   |
    | :set path+=/usr/local/include | 添加路径到path变量                   |
    
* 第十章 复制与粘贴
  - x, s, d{motion}, c{motion}, y{motion}
  - 剪切，粘贴操作指定寄存器
    | 命令      | 作用                                                |
    |-----------+-----------------------------------------------------|
    | "adiw     | diw剪切下来的单词放到a寄存器中                      |
    | "ap       | 将a寄存器中的内容粘贴在当前                         |
    | y{motion} | y命令将复制内容到专用寄存器0中，粘贴则使用"0p       |
    | x,s,d,c， | 命令剪切的内容到无名寄存器中，用""表示，p==""p      |
    | "_diw     | 剪切的内容到黑洞寄存器_中，不会覆盖无名寄存器的内容 |
  - 系统剪贴板"+和专用寄存器"*
    | 命令   | 作用                                             |
    |--------+--------------------------------------------------|
    | "+p    | 粘贴系统粘贴板内容到当前位置                     |
    | <C-r>+ | 插入模式下，粘贴系统粘贴板内容到当前位置         |
    | "+y    | 将当前内容复制到系统粘贴板                       |
    | "*     | linux中的主粘贴板，在windows和Mac OS中可与"+通用 |
  - 其它寄存器
    | 命令 | 作用               |
    |------+--------------------|
    | "%   | 当前文件名         |
    | "#   | 轮换文件名         |
    | ".   | 上次插入的文本     |
    | ":   | 上次执行的 Ex 命令 |
    | "/   | 上次查找的模式     |
  - 用寄存器内容替换高亮选区的文本
    | yiw | 复制内容       |
    | ve  | 高亮待修改内容 |
    | p   | 粘贴           |
  - 交换两个词
    | de | 剪切当前词 |
    | mm | 打上标记m  |
    | ww | 移动       |
    | ve | 选中目标词 |
    | p  | 粘贴       |
    | `m | 回到标记处 |
    | p  | 粘贴       |
  - 粘贴面向行的区域
    | gp   | 粘贴同时，将光标位置移到被粘贴出来文本结尾     |
    | p    | 粘贴当前行之后，同时光标移到被粘贴出来文本之前 |
    | P&gP | 同理                                           |
  - vim可以使用系统粘贴命令，:set pastetoggle=<f2>，使用<f2>来切换'paste'选项
